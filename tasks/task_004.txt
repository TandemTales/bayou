# Task ID: 4
# Title: Implement Combat System
# Status: done
# Dependencies: 3
# Priority: high
# Description: Create the combat system for pieces to attack and damage each other, including health tracking and piece removal.
# Details:
1. Implement attack mechanics between pieces
2. Create damage calculation system
3. Implement health tracking and piece death
4. Handle piece removal from board
5. Implement combat resolution logic

Pseudo-code for combat system:
```cpp
class CombatSystem {
public:
    static void resolveCombat(GameBoard& board, Position attacker, Position defender);
    static void applyDamage(Piece* attacker, Piece* defender);
    static void checkAndRemoveDeadPieces(GameBoard& board);
};

void CombatSystem::resolveCombat(GameBoard& board, Position attacker, Position defender) {
    Piece* attackingPiece = board.getSquare(attacker.x, attacker.y).getPiece();
    Piece* defendingPiece = board.getSquare(defender.x, defender.y).getPiece();
    
    if (attackingPiece && defendingPiece && 
        attackingPiece->getOwner() != defendingPiece->getOwner()) {
        applyDamage(attackingPiece, defendingPiece);
        checkAndRemoveDeadPieces(board);
    }
}
```

# Test Strategy:
1. Unit tests for damage calculation
2. Verify piece death and removal
3. Test various combat scenarios
4. Validate king death detection
5. Ensure proper combat resolution order

# Subtasks:
## 1. Design combat data structures [done]
### Dependencies: None
### Description: Create the necessary data structures to track combat-related information such as piece health, attack values, and combat status.
### Details:
Define classes or interfaces for combat attributes (health, attack power, defense). Implement health tracking for each piece on the board. Create a system to track combat history for potential undo/replay features. Ensure these structures integrate with the existing piece representation.

## 2. Implement damage calculation logic [done]
### Dependencies: 4.1
### Description: Create the core algorithm for calculating damage during combat encounters between pieces.
### Details:
Develop formulas for attack and defense calculations. Implement modifiers based on piece types or special abilities. Create random elements if needed (critical hits, miss chance). Include logic for environmental or positional bonuses/penalties. Add methods to apply calculated damage to pieces.

## 3. Develop health tracking system [done]
### Dependencies: 4.1, 4.2
### Description: Build a system to monitor and update the health status of pieces during and after combat.
### Details:
Implement methods to reduce health based on damage taken. Create visual indicators for current health status. Add logic to detect when health reaches zero or critical levels. Implement any healing or regeneration mechanics if applicable. Ensure health changes trigger appropriate UI updates.

## 4. Create piece removal logic [done]
### Dependencies: 4.3
### Description: Implement the system for removing pieces from the board when they are defeated in combat.
### Details:
Develop logic to detect when a piece should be removed (health <= 0). Create methods to safely remove pieces from the game board. Implement any death effects or consequences. Handle cleanup of references to removed pieces. Add animations or visual feedback for piece removal.

## 5. Integrate combat system with game board state [done]
### Dependencies: 4.2, 4.3, 4.4
### Description: Connect the combat system with the overall game state to ensure proper interaction with other game systems.
### Details:
Implement combat initiation based on game rules (adjacent pieces, attack commands). Create event system for combat-related events (attack, damage, defeat). Update game state after combat resolution. Ensure combat results affect turn progression appropriately. Add combat logs or history tracking for player information.

