# Task ID: 10
# Title: Implement Game State Management and Turn System
# Status: in-progress
# Dependencies: 4, 6, 9
# Priority: high
# Description: Create the system for managing game state, turn progression, and win conditions.
# Details:
1. Implement game state class with all game components
2. Create turn system with phases (draw, play, move)
3. Implement win condition detection (king death)
4. Create game initialization and reset
5. Implement game state serialization for save/load

Pseudo-code for game state management:
```cpp
class GameState {
private:
    GameBoard board;
    ResourceSystem resourceSystem;
    std::array<Hand, 2> playerHands;
    std::array<Deck, 2> playerDecks;
    PlayerSide currentPlayer;
    GamePhase currentPhase;
    bool gameOver;
    PlayerSide winner;
    
public:
    GameState();
    
    void initializeGame();
    void startTurn();
    void endTurn();
    void nextPhase();
    
    bool isGameOver() const;
    PlayerSide getWinner() const;
    void checkWinConditions();
    
    GameBoard& getBoard();
    ResourceSystem& getResourceSystem();
    Hand& getPlayerHand(PlayerSide player);
    Deck& getPlayerDeck(PlayerSide player);
    PlayerSide getCurrentPlayer() const;
    GamePhase getCurrentPhase() const;
};

void GameState::checkWinConditions() {
    bool player1KingAlive = false;
    bool player2KingAlive = false;
    
    // Check if kings are alive
    for (int y = 0; y < 8; y++) {
        for (int x = 0; x < 8; x++) {
            const Square& square = board.getSquare(x, y);
            if (!square.isEmpty()) {
                Piece* piece = square.getPiece();
                if (dynamic_cast<King*>(piece)) {
                    if (piece->getOwner() == PlayerSide::PLAYER_1) {
                        player1KingAlive = true;
                    } else {
                        player2KingAlive = true;
                    }
                }
            }
        }
    }
    
    if (!player1KingAlive) {
        gameOver = true;
        winner = PlayerSide::PLAYER_2;
    } else if (!player2KingAlive) {
        gameOver = true;
        winner = PlayerSide::PLAYER_1;
    }
}
```

# Test Strategy:
1. Unit tests for turn progression
2. Verify win condition detection
3. Test game initialization
4. Validate phase transitions
5. Ensure proper game state serialization

# Subtasks:
## 1. Verify Game State Integration [done]
### Dependencies: None
### Description: Test and verify that all game state components work together correctly
### Details:
1. Test GameState initialization and reset functionality\n2. Verify turn progression and player switching\n3. Test steam generation and resource management\n4. Verify card system integration\n5. Test win condition detection\n6. Ensure proper game state serialization

## 2. Implement Game Phase System [done]
### Dependencies: None
### Description: Add proper game phase transitions (draw, play, move phases) to the turn system
### Details:
1. Define GamePhase enum with DRAW, PLAY, MOVE phases\n2. Update TurnManager to handle phase transitions\n3. Implement phase-specific action validation\n4. Add phase progression logic within turns\n5. Update UI to display current phase\n6. Test phase transitions and restrictions

## 3. Enhance Win Condition System [in-progress]
### Dependencies: None
### Description: Improve and test the win condition detection system
### Details:
1. Test king death detection in GameRules\n2. Verify proper game result setting\n3. Add additional win conditions if needed\n4. Test game over state transitions\n5. Ensure proper cleanup when game ends\n6. Add win condition notifications

